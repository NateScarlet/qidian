{{ $root := . -}}

// Code generated from {{templateFiles}}, DO NOT EDIT.

package book

type Category string

type SubCategory string

const (
{{- range $k, $v := .mainCategories}}
    C{{$v.name}}{{$v.site}} Category = "{{$k}}"
{{- end -}}
{{- range $k, $v := .subCategories}}
    SC{{$v.name}}{{$v.site}} SubCategory = "{{$k}}"
{{- end }}
)

func (c Category) String() string {
    switch c {
{{- range $k, $v := .mainCategories}}
    case C{{$v.name}}{{$v.site}}:
        return "{{$v.name}}"
{{- end }}
    }
    return ""
}

// Site for this category, "" for main site, "mm" for female site.
func (c Category) Site() string {
    switch c {
{{- range $k, $v := .mainCategories}}
    case C{{$v.name}}{{$v.site}}:
        return "{{$v.site}}"
{{- end }}
    }
    return ""
}

func CategoryByName(name, site string) Category {
    switch {
{{- range $k, $v := .mainCategories}}
    case name == "{{$v.name}}" && site == "{{$v.site}}":
        return C{{$v.name}}{{$v.site}}
{{- end }}
    }
    return ""
}

func (sc SubCategory) Parent() Category {
    switch sc{
{{- range $k, $v := .subCategories}}
    case SC{{$v.name}}{{$v.site}}:
{{- $c := get $root.mainCategories $v.parentID  }}
        return C{{$c.name}}{{$c.site}}
{{- end }}
    }
    return ""
}

func (sc SubCategory) String() string {
    switch sc {
{{- range $k, $v := .subCategories}}
    case SC{{$v.name}}{{$v.site}}:
        return "{{$v.name}}"
{{- end }}
    }
    return ""
}


// Site for this sub-category, "" for main site, "mm" for female site.
func (c SubCategory) Site() string {
    switch c {
{{- range $k, $v := .subCategories}}
    case SC{{$v.name}}{{$v.site}}:
        return "{{$v.site}}"
{{- end }}
    }
    return ""
}

func SubCategoryByName(name, site string) SubCategory {
    switch {
{{- range $k, $v := .subCategories}}
    case name == "{{$v.name}}" && site == "{{$v.site}}":
        return SC{{$v.name}}{{$v.site}}
{{- end }}
    }
    return ""
}
